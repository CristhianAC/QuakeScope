---

---



<style>
.chart-container {
  /* max-width: 800px;  */
  margin: 0 auto;
}
</style>

<!-- <div class="chart-container">
  <canvas id="myLineChart"></canvas>
</div>

<script>
  import Chart from 'chart.js/auto';
import Marte from '../../../public/XB.ELYSE.02.BHV.2019-05-23HR02_evid0041.json';

const lineCanvas = document.getElementById('myLineChart') as HTMLCanvasElement | null;

if (lineCanvas) {
  const ctx = lineCanvas.getContext('2d');

  if (ctx) {

    const labels = Marte.time;
    const chartColors = {
      red: 'rgba(255, 99, 132, 1)'
    };

    const data = {
      labels: labels,
      datasets: [
        {
          label: 'Mars',
          data: Marte.vel,
          borderColor: chartColors.red,
          fill: true,
          cubicInterpolationMode: 'monotone',
          tension: 0,
          pointRadius: 0
        }
      ]
    };

    const config: any = {
      type: 'line',
      data: data,
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'Seismic Mars'
          },
          legend: {
            display: false
          }
        },
        interaction: {
          intersect: false
        },
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: 'Time'
            }
          },
          y: {
            display: true,
            title: {
              display: true,
              text: 'Velocity'
            },
            suggestedMin: Math.min(...Marte.vel), // Cambié esto para que refleje la velocidad
            suggestedMax: Math.max(...Marte.vel)
          }
        }
      },
      plugins: [
        {
          // Plugin para dibujar la línea vertical
          afterDraw: function (chart: any) {
            const ctx = chart.ctx;
            const xAxis = chart.scales.x;

            // Posición en la que quieres dibujar la línea vertical
            const xValue = xAxis.getPixelForValue(189);

            ctx.save();
            ctx.strokeStyle = 'rgb(85, 255, 0)';
            ctx.lineWidth = 20000; // Ajusta el grosor de la línea a algo razonable
            ctx.beginPath();
            ctx.moveTo(xValue, 1000);
            ctx.lineTo(xValue, chart.height);
            ctx.stroke();
            ctx.restore();
          }
        }
      ]
    };

    new Chart(ctx, config);
  }
}

</script>
-->

<canvas id="myChart"></canvas>

<script>
  import Chart from 'chart.js/auto';
  import Marte from '../../../public/XB.ELYSE.02.BHV.2019-05-23HR02_evid0041.json';


const lineCanvas = document.getElementById('myChart') as HTMLCanvasElement | null;

if (lineCanvas) {
  const ctx = lineCanvas.getContext('2d');                    
  
  if (ctx) {
    const config: any = {
      type: 'line',
      data: {
        labels: Marte.time,
        datasets: [{
          label: "Mars",
          data: Marte.vel,
          fill: false,
          borderColor: 'rgba(255, 99, 132, 1)',
          pointRadius: 0
        }]
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'Seismic Mars'
          }
        }
      },
      plugins: [
        {
           // Hook after the chart is drawn
          afterDraw: (chart:any) => {
            const ctx = chart.ctx;
            const xAxis = chart.scales.x;
            const yAxis = chart.scales.y;

             // Define the array of indices where the lines will be drawn
            const indices = [1498.9,1998]; // Cambia los índices para donde quieras las líneas

            if (indices.length > 0 && xAxis) {
  indices.forEach((index: number) => {
    // Si 'Marte.time' no es numérico, encontrar el índice correspondiente
    const xValue = Marte.time.find((time: number) => time >= index);
    console.log(index,xValue, xAxis)
    
    if (xValue !== undefined) {
      const pixelPosition = xAxis.getPixelForValue(xValue);
      
      // Dibuja la línea vertical en la posición correcta
      ctx.save();
      ctx.beginPath();
      ctx.moveTo(pixelPosition, yAxis.top);
      ctx.lineTo(pixelPosition, yAxis.bottom);
      ctx.strokeStyle = 'red';
      ctx.lineWidth = 2;
      ctx.stroke();
      ctx.restore();
    }
  });
}

          }
        }
      ]
    };

    new Chart(ctx, config);
  }
}
</script>
